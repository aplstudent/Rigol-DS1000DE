Tuesday - Jan 12th, 2016
- I am running python 2.7

- Tried to use pyusb to connect to oscilloscope
	- Hit a wall immediately while trying to list connected devices
	- Apparently I need a "backend"

PYVISA
- I know I used pyvisa before, so now I'm trying that.
	- pyvisa is here - https://pyvisa.readthedocs.org/en/stable/index.html
	- it can also be installed through pip
		- pip install pyvisa
	- Must install NI-VISA
		- Support windows and macOS, but only limited linux distros
		- Slightly worried about incompatibility with ubuntu.
- Searching for solutions to the "cannot find backend" problem in pyusb
	- I think pyusb would be the better option if it worked so that we could use it on multiple os's

USBTMC
- Looking at possibly using usbtmc
	- Works with linux, windows, and macos, but requires pyusb on windows.
	- had to install libusb-win32
		- ran inf_wizard.exe to make a usb device available
	- installed python-usbtmc
	- Trying to run it in ipython
		- Getting a million errors trying to connect to usb device

PYUSB WORKING?
- pyusb is working now?  I ran the libusb-win32 inf_wizard.exe and now pyusb is working I guess.
- I'll try to see if pyusb will work with the oscilloscope tomorrow or Thursday.

Summary:
python packages installed: pyusb, pyvisa, python-usbtmc
software: ni-visa, libusb-win32
_______________________________________


Thursday - Jan 14th, 2016
PYUSB
- Still messing with pyUSB.  It seems to be identifying the devices that I have connected,
	but I cannot write anything to them.  Right now I'm just working with my webcam
- I think windows is giving me a few problems.
DUAL BOOT
- We are going to be running these programs on Ubuntu anyway, so I'm dual 
	booting my laptop with Ubuntu and Windows.
- I just installed the os's to an ssd a few days ago. My life is changed forever.  
	So much faster.
- Uh oh.  Windows wasn't restarting.  Forced shut down.
- Alright we've booted into Ubuntu.
- For some reason I'm having problems shutting the computer down. 
- Windows is resetting -.-  It just refused to boot so this is what I've resorted to.
- 4:25 -> 8%.  We'll get there eventually.
- 4:26 -> 17%.  Actually it's going pretty quickly.
- 4:40 -> We're installing Windows again.  Screw tech problems.  
	I'm just glad I'm not doing this on my desktop.
- I think I'm going to buy a raspberry pi just to have that as a test linux environment, 
	at least if the ubuntu install refuses to work.
- 4:45 -> Ok I think we've got windows installed.
- "All of your files are exactly where you left them".  Alright windows, let's see them.
- Everything looks good.  Windows gave me a detailed list of everything that was deleted.  
	It was just a bunch of programs
	that I can easily reinstall.
- Ubuntu and Windows really don't want to dual boot. -.-
	Now windows will boot, but Ubuntu is stuck at startup.
	It looks like it at least isn't stalled.  I'll let it spend some time trying to fix itself.
EDIT GRUB FILE
- Had to edit grub file in ubuntu.  Deleted "quiet splash".
- I can see all my files in Ubuntu thank god.
- Alright now I'm gonna have to spend a while setting up all the files.

RUNNING IPYTHON
- Had a shit show trying to get ipython working on ubuntu 
	(I'm not too familiar with linux generally)
	I had to get used to using sudo apt-get install <pkg> and all those commands.  
	Also had to install python packages in that way,
	which is unusual for me who usually always just runs pip install <pkg>.

PYUSB
- All of my usbs are showing up now.
__________________________________

Monday - Jan 18th, 2016
PYUSB
- I see the oscilloscope showing up but I apparently do not have permission
	to access the device.
- Following the instructions from scruss.com/blog/tag/usbtmc/
	- Had to give permission through a "rules" file.
- Now I'm getting a "resource busy" problem whenever I try to communicate
	with the oscilloscope.
- pyusb is giving me a headache
USBTMC
- Success!  I was able to ask "*IDN?" to the osc, and I was returned	"Rigol Technologies, DS1102E ..."
- Able to read and write to the oscilloscope.
- Starting to write a wrapper for the usbtmc.Instrument class as an abstraction
	layer.  This will allow for multiple library backends other than just usbtmc.
	We could write one for pyUSB and pyVISA for example.  This would give us
	compatability with windows.
____________________________________

Saturday - Jan 23rd, 2016
- Continue working on the usbtmc wrapper in the RigolSkeleton.py file
- Messing around with some of the functions available to me. :RUN, :STOP, :AUTO,
	stuff like that.
- Running :HARDcopy is supposed to save a bitmap of the current screen somewhere,
	but I have no idea where it is being saved to.
- Tried to run tests in ipython but I kept getting a "resource busy" error.  Tried to detach
	kernel driver because that is what I had to do before but it wasn't working.  Restarted computer,
	hopefully this fixes it.
	- Seemed to fix it.  I think I could have just unplugged the device and replugged it in.
- Implementing various functions from the rigol documentation.  I should keep track of what I do and
	do not implement.  I think I'll write that within my code as comments.
- Just realized that when you connect the osc via usb and start writing commands to it, it will refuse
	any manual inputs.  Kind of annoying.
	- Tried to set up connection so that I could close my connection and continue pressing the buttons on
		the oscilloscope but that didn't work.  Even after "closing" the connection, the oscilloscope would
		not take any input.
- Tried to retrieve waveform data using the ask() method, but got some weird utf8 decoding errors.
	- Someone else has asked this before and had to revert to using the ask_raw function.  Worked
		fine after switching to that function.
- Was able to plot data from the scope!  The scaling for the voltage and time is all off, so that needs to be fixed.
- Wrote about 500 lines today so that's pretty good.  May continue.  It's past midnight now but I was up till 5am
	this morning and I'm not very tired.
- I've plotted in python plenty of times using matplotlib, but never had to do plots of changing data.  I've been
	thinking about how I can do this.  Seems like there is a library in matplotlib which does something that can 
	help.  matplotlib.animation.
	- I can also just update the points as per a suggestion from stack overflow.
_____________________________________

Monday - Jan 25th, 2016
- Writing more wrapper functions.  On to doing the trigger functions.  So many functions mannnn.
- Got up to 1000 lines yey.
- I think I've found how to enable the use of the buttons on the front of the oscilloscope.
	There is a "key enable" function which locks or unlocks use of buttons.  I'll have to try
	sending that command later.
- Added the rest of the channel commands and others.
- Next I'll try to add some of the key functions.  It doesn't look like most of them will be necessary for
	general use though.
______________________________________

Tuesday - Jan 26th, 2016
- Added the key function that I wanted.  Only the key enable function though,
	the rest of the key functions are just emulating key presses on the oscilloscope
	and those functions have already been fulfilled by other methods that I have written.
- Added attributes for Channel1/2 voltage scale that update every time you change the scales.
	Also added an attribute for the timebase scale and offsets for timebase and voltages that auto
	update with changes using their respecitive methods.  This way, plotting can always be done 
	accurately.  Although I'm still not sure what the correct conversion is from raw data points
	to the correct time and voltages.
- renamed rigolSkeleton.py to usbcon.py because I realized there was nothing in the file that was
	specific to the rigol oscilloscope and I could use it for any usb device.  I'll use it for future
	devices also.
- Changed timebaseScale/offset, channelOffset/scale functions to return float values rather 
	than strings
- Starting to write a gui interface in a new file rigolx.py.  Trying to understand how I will 
	implement multiprocessing so that the gui will not lock up every time it is running 
	a new process.  I'm also trying to figure out how to place a plot inside a tkinter frame.  
	Shouldn't be too difficult.
- multiprocessing is super confusing and going to be hard to debug if things go wrong, but I 
	just did a test and it seemed to work.  I'll go into lab tomorrow hopefully and see if I can
	get the plots to look exactly like what shows up on the oscilloscope.
________________________________________

Wednesday - Jan 27th, 2016
- I want to try to put the Process instances inside of the rigolx class.  That will make them
	much easier to control and I can more easily dictate when loops will run and I can stop
	the process from continuously querying the oscilloscope instead of ddos-ing the osc.
- placed the multiprocessing.Process instances inside of the rigolx class.  I'll check later today if it works.
- I DID THE MULTIPROCESSING WAO I'M SO GREAT.  That was a hassle.  I think I was making too many queries to the
	oscilloscope, although it could have been a hand full of other things.  I got rid of a lot of extra calls
	that I didn't need to make.  For example I was asking for the time and voltage scale every time I replotted my
	graph.  Instead of doing that I just initialized it once, and if I ever send a command to change the scale to the
	oscilloscope, I'll update the x and y_scale attributes.
- Trying to find what the best refresh rates are.  The oscilloscope seems to refresh every 10th of a second or so,
	so I want to try to match that.